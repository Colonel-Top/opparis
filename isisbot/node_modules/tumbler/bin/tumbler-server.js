#!/usr/bin/env node
(function() {
  var ARGUMENTS, ARGUMENTS_PARSER, fs, help, http, main, mime, path, request_handler, run_server, serve_static_file, tumbler, utils;
  http = require('http');
  fs = require('fs');
  path = require('path');
  mime = require('mime');
  utils = require('../lib/utils.js');
  tumbler = require('tumbler');
  ARGUMENTS = [[["-p", "--port"], "port", true, "Server port"], [["-h", "--host"], "host", true, "Server Host"], [["-m", "--mode"], "mode", true, "(debug|release)"], [["-a", "--always"], "alwaysCompile", false, "Always compile"]];
  ARGUMENTS_PARSER = new utils.ArgumentParser({
    args: ARGUMENTS,
    defaultConfig: {
      port: 10000,
      host: "localhost",
      mode: "debug",
      alwaysCompile: false
    },
    configFile: ".tumbler"
  });
  help = function() {
    return ARGUMENTS_PARSER.help();
  };
  serve_static_file = function(response, filepath) {
    var content_type, file, stat;
    try {
      if (path.existsSync(filepath)) {
        stat = fs.statSync(filepath);
        if (stat.isDirectory()) {
          response.writeHead(404);
          return response.end("That's a directory.");
        } else {
          content_type = mime.lookup(filepath);
          response.writeHead(200, {
            'content-type': content_type
          });
          file = fs.createReadStream(filepath);
          return file.pipe(response);
        }
      } else {
        response.writeHead(404);
        return response.end("File not found");
      }
    } catch (error) {
      response.writeHead(500);
      return response.end("Error " + error_msg);
    }
  };
  request_handler = function(builder, config) {
    return function(request, response) {
      var failure_callback, filepath, serve_file, url, url_base;
      response.setHeader("Access-Control-Allow-Origin", "*");
      url = request.url;
      console.log('GET ', url);
      url_base = url.split('?', 1);
      filepath = '.' + url_base;
      serve_file = function() {
        return serve_static_file(response, filepath);
      };
      failure_callback = function(err_msg) {
        response.writeHead(500);
        return response.end(err_msg);
      };
      return builder.build(filepath, serve_file, failure_callback);
    };
  };
  /*
  compare_path = (left,right) ->
      fs.realpathSync(left) != fs.realpathSync(right) 
  */
  run_server = function(builder, config) {
    var server;
    server = http.createServer(request_handler(builder, config));
    console.log('Listening on port : ' + config.port);
    return server.listen(config.port);
  };
  main = function(argv) {
    var builder, config;
    try {
      config = ARGUMENTS_PARSER.parse(argv);
      builder = tumbler.makeBuilder(config);
      ARGUMENTS_PARSER.print(config);
      return run_server(builder, config);
    } catch (e) {
      console.log(e);
      console.log(e.stack);
      return help();
    }
  };
  exports.main = main;
  exports.help = help;
  exports.DESCRIPTION = "Runs a static server with on-the-fly compilation.";
  if (require.main === module) {
    main(process.argv.slice(2));
  }
}).call(this);
